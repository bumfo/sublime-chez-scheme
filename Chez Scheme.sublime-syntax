%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
#
# `Common Lisp` Language Reference:
# http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/index.html
#
name: Chez Scheme
scope: source.ss
file_extensions:
  - ss

variables:
  identifier: '(?:(?!\+|\-(?!\>)|\.|\d)[[:alnum:]?!.+\-*/<=>:$%\^&_~@]+|[+\-]|\.\.\.){{boundary}}'
  boundary: '(?=\(|\)|\[|\]|\s|$)'
  any_char: '(?:[^ ]| )'

  real_2: '(?:[+\-]?(?:[0-1]+|[0-1]+\/[0-1]+)|\+nan\.0|\-nan\.0|\+inf\.0|\-inf\.0)'
  real_8: '(?:[+\-]?(?:[0-7]+|[0-7]+\/[0-7]+)|\+nan\.0|\-nan\.0|\+inf\.0|\-inf\.0)'
  real_10: '(?:[+\-]?(?:[0-9]+\/[0-9]+|(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[esfdl][+\-]?[0-9]+)?(?:\|[0-9]+)?)|\+nan\.0|\-nan\.0|\+inf\.0|\-inf\.0)'
  real_16: '(?:[+\-]?(?:[0-9a-f]+|[0-9a-f]+\/[0-9a-f]+)|\+nan\.0|\-nan\.0|\+inf\.0|\-inf\.0)'

contexts:
  prototype:
    - include: comments

  main:
    - include: shebang
    - include: expressions
    - scope: invalid.illegal.identifier.symbol.ss
      match: '\S'

  comments:
    - scope: comment.line.ss
      match: ';.*(?:\n|$)'
    - match: '#\|'
      push:
        - meta_scope: comment.block.ss
        - match: '\|#'
          pop: true

  unmatched:
    - scope: invalid.illegal.identifier.ss
      match: '[^\s()]+'

  lists:
    - match: '\('
      scope: punctuation.section.list.begin.ss
      push:
        - match: '\)'
          scope: punctuation.section.list.end.ss
          pop: true
        - include: datums
    - match: '\['
      scope: punctuation.section.list.begin.ss
      push:
        - match: '\]'
          scope: punctuation.section.list.end.ss
          pop: true
        - include: datums

  hints:
    - scope: keyword
      match: '(?:import|define|lambda|if|\+|\-|\*|\/|\=){{boundary}}'
    - scope: support.function
      match: '(?:(?:eq|eqv|equal)\?|cons|car|cdr){{boundary}}'
    # - scope: variable.function
    #   match: '{{identifier}}'

  expression-parens:
    - match: '\('
      scope: punctuation.section.expr.begin.ss
      push:
        - match: '\)'
          scope: punctuation.section.expr.end.ss
          pop: true
        - match: '\s*'
          set:
            - include: hints
            - match: ''
              set:
                - match: '\)'
                  scope: punctuation.section.expr.end.ss
                  pop: true
                - include: expressions
    - match: '\['
      scope: punctuation.section.expr.begin.ss
      push:
        - match: '\]'
          scope: punctuation.section.expr.end.ss
          pop: true
        - match: '\s*'
          set:
            - include: hints
            - match: ''
              set:
                - match: '\]'
                  scope: punctuation.section.expr.end.ss
                  pop: true
                - include: expressions

  expressions:
    - include: expression-parens
    - include: datums

  datums:
    - include: lists
    - scope: punctuation.section.quoted.ss
      match: '''\s*'
      push:
        - meta_scope: meta.quoted
        - include: datums
        - match: ''
          pop: true
    - include: boolean
    - include: numbers
    - include: characters
    - include: strings
    - scope: meta.identifier
      match: '{{identifier}}'
    - include: unmatched

  boolean:
    - scope: constant.language.boolean.ss
      match: '#[tf]'

  characters:
    - scope: constant.character.ss
      match: '(?:#\\(?:alarm|backspace|delete|esc|linefeed|newline|page|return|space|tab|vtab|nul)|(?:(?i)#\\x[0-9a-f]+)|#\\{{any_char}}){{boundary}}'

  numbers:
    - scope: constant.numeric.binary.ss
      match: '(?i)(?:(?:#[b])(?:#[ie])?|(?:#[ie])?(?:#[b]))(?:{{real_2}}(?:@{{real_2}})?){{boundary}}'
    - scope: constant.numeric.octal.ss
      match: '(?i)(?:(?:#[o])(?:#[ie])?|(?:#[ie])?(?:#[o]))(?:{{real_8}}(?:@{{real_8}})?){{boundary}}'
    - scope: constant.numeric.decimal.ss
      match: '(?i)(?:(?:#[d])?(?:#[ie])?|(?:#[ie])?(?:#[d])?)(?:{{real_10}}(?:@{{real_10}})?){{boundary}}'
    - scope: constant.numeric.hexadecimal.ss
      match: '(?i)(?:(?:#[x])(?:#[ie])?|(?:#[ie])?(?:#[x]))(?:{{real_16}}(?:@{{real_16}})?){{boundary}}'

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.ss
      push:
        - meta_scope: string.quoted.double.ss
        - meta_include_prototype: false
        - scope: punctuation.definition.string.end.ss
          match: '"'
          pop: true
        - scope: invalid.illegal.newline.ss
          match: '\n'
          pop: true
        - match: '\\(?:"|\\|a|b|f|n|r|t|v|x[0-9a-fA-F]+;|(?:(?!\n)\s)*\n(?:(?!\n)\s)*)'
          scope: constant.character.escape.ss

  shebang:
    - match: ^(#!).*$\n?
      scope: comment.line.shebang.js
      captures:
        1: punctuation.definition.comment.js
